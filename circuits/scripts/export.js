const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const snarkjs = require('snarkjs'); // Use snarkjs library for vkey export

// Configuration
const BUILD_DIR = path.join(__dirname, '../build');

// Circuits to export (should match compile.js/setup.js)
const circuits = [
  { name: 'withdraw' }
];

async function exportKeys() {
  try {
    console.log('Starting key export...');

    for (const circuit of circuits) {
      const { name } = circuit;
      console.log(`\nExporting keys for ${name} circuit...`);

      const zkeyPath = path.join(BUILD_DIR, `${name}.zkey`);
      const vkeyPath = path.join(BUILD_DIR, `${name}_verification_key.json`);
      const solidityVerifierPath = path.join(BUILD_DIR, `${name}_verifier.sol`);

      // Check if ZKey file exists (generated by setup script)
      if (!fs.existsSync(zkeyPath)) {
          throw new Error(`ZKey file not found at ${zkeyPath}. Please run 'npm run setup' first.`);
      }

      // 1. Export verification key (JSON) using snarkjs library
      console.log(`Exporting verification key to ${vkeyPath}...`);
      const vKey = await snarkjs.zKey.exportVerificationKey(zkeyPath);
      fs.writeFileSync(vkeyPath, JSON.stringify(vKey, null, 2));
      console.log('Verification key exported successfully.');

      // 2. Export Solidity verifier contract using snarkjs CLI
      console.log(`Exporting Solidity verifier to ${solidityVerifierPath}...`);
      const verifierCmd = `snarkjs zkey export solidityverifier ${zkeyPath} ${solidityVerifierPath}`;
      execSync(verifierCmd, { stdio: 'inherit' });
      console.log('Solidity verifier exported successfully.');

      console.log(`Keys for ${name} exported successfully!`);
    }

    console.log('\nKey export finished!');

  } catch (error) {
    console.error('Error during key export:', error);
    process.exit(1);
  }
}

// Run the export
exportKeys();
