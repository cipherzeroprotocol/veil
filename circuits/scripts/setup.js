const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const BUILD_DIR = path.join(__dirname, '../build');
const PTAU_DIR = path.join(__dirname, '../ptau');
// Ensure this matches the Powers of Tau file you downloaded
const PHASE1_FILENAME = 'powersOfTau28_hez_final_14.ptau'; 
const PHASE1_PATH = path.join(PTAU_DIR, PHASE1_FILENAME);

// Circuits to setup (should match compile.js)
const circuits = [
  { name: 'withdraw' }
];

async function performSetup() {
  try {
    console.log('Starting Groth16 setup...');

    // Check if Powers of Tau file exists
    if (!fs.existsSync(PHASE1_PATH)) {
      throw new Error(`Powers of Tau file not found at ${PHASE1_PATH}. Please download it to the 'ptau' directory.`);
    } else {
       console.log(`Using Powers of Tau file: ${PHASE1_PATH}`);
    }

    for (const circuit of circuits) {
      const { name } = circuit;
      console.log(`\nSetting up ${name} circuit...`);

      const r1csPath = path.join(BUILD_DIR, `${name}.r1cs`);
      const zkeyPath = path.join(BUILD_DIR, `${name}.zkey`);

      // Check if R1CS file exists (generated by compile script)
      if (!fs.existsSync(r1csPath)) {
          throw new Error(`R1CS file not found at ${r1csPath}. Please run 'npm run compile' first.`);
      }

      // Generate zkey using snarkjs groth16 setup
      console.log(`Generating ${name}.zkey...`);
      const setupCmd = `snarkjs groth16 setup ${r1csPath} ${PHASE1_PATH} ${zkeyPath}`;
      execSync(setupCmd, { stdio: 'inherit' });

      console.log(`Setup for ${name} completed successfully! ZKey generated at ${zkeyPath}`);
    }

    console.log('\nGroth16 setup finished!');

  } catch (error) {
    console.error('Error during Groth16 setup:', error);
    process.exit(1);
  }
}

// Run the setup
performSetup();
